{"version":3,"file":"rouge.js","sources":["constants.js","utils.js","rouge.js"],"sourcesContent":["/**\n* @Author: Lim Mingjie, Kenneth\n* @Date:   2016-01-20T19:03:19-05:00\n* @Email:  me@kenlimmj.com\n* @Last modified by:   Lim Mingjie, Kenneth\n* @Last modified time: 2016-01-26T23:22:24-05:00\n*/\n\nexport const TREEBANK_CONTRACTIONS = [\n  /\\b(can)(not)\\b/i, /\\b(d)('ye)\\b/i, /\\b(gim)(me)\\b/i,\n  /\\b(gon)(na)\\b/i, /\\b(got)(ta)\\b/i, /\\b(lem)(me)\\b/i,\n  /\\b(more)('n)\\b/i, /\\b(wan)(na) /i, /\\ ('t)(is)\\b/i,\n  /\\ ('t)(was)\\b/i,\n];\n\nexport const HONORIFICS = [\n  'jr', 'mr', 'mrs', 'ms', 'dr', 'prof', 'sr', 'sen', 'corp', 'rep', 'gov',\n  'atty', 'supt', 'det', 'rev', 'col', 'gen', 'lt', 'cmdr', 'adm', 'capt',\n  'sgt', 'cpl', 'maj', 'miss', 'misses', 'mister', 'sir', 'esq', 'mstr', 'phd',\n  'adj', 'adv', 'asst', 'bldg', 'brig', 'comdr', 'hon', 'messrs', 'mlle', 'mme',\n  'op', 'ord', 'pvt', 'reps', 'res', 'sens', 'sfc', 'surg',\n];\n\nexport const ABBR_COMMON = [\n  'arc', 'al', 'exp', 'rd', 'st', 'dist', 'mt', 'fy', 'pd', 'pl', 'plz', 'tce',\n  'llb', 'md', 'bl', 'ma', 'ba', 'lit', 'ex', 'e.g', 'i.e', 'circa', 'ca', 'cca',\n  'v.s', 'etc', 'esp', 'ft', 'b.c', 'a.d',\n];\n\nexport const ABBR_ORGANIZATIONS = [\n  'co', 'corp', 'yahoo', 'joomla', 'jeopardy',\n  'dept', 'univ', 'assn', 'bros', 'inc', 'ltd',\n];\n\nexport const ABBR_PLACES = [\n  'ala', 'ariz', 'ark', 'cal', 'calif', 'col', 'colo', 'conn', 'del', 'fed',\n  'fla', 'fl', 'ga', 'ida', 'ind', 'ia', 'la', 'kan', 'kans', 'ken', 'ky',\n  'la', 'md', 'mich', 'minn', 'mont', 'neb', 'nebr', 'nev', 'okla', 'penna',\n  'penn', 'pa', 'dak', 'tenn', 'tex', 'ut', 'vt', 'va', 'wash', 'wis', 'wisc',\n  'wy', 'wyo', 'usafa', 'alta', 'ont', 'que', 'sask', 'yuk', 'ave', 'blvd',\n  'cl', 'ct', 'cres', 'hwy', 'U.S', 'U.S.A', 'E.U', 'NÂ°',\n];\n\nexport const ABBR_TIME = [\n  'a.m', 'p.m',\n];\n\nexport const ABBR_DATES = [\n  'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug',\n  'sep', 'oct', 'nov', 'dec', 'sept', 'sep',\n];\n\nexport const GATE_EXCEPTIONS = [\n  'ex', 'e.g', 'i.e', 'circa', 'ca', 'cca',\n  'v.s', 'esp', 'ft', 'st', 'mt',\n  ...HONORIFICS,\n];\n\nexport const GATE_SUBSTITUTIONS = [\n  ...ABBR_COMMON,\n  ...ABBR_DATES,\n  ...ABBR_ORGANIZATIONS,\n  ...ABBR_PLACES,\n  ...ABBR_TIME,\n  ...HONORIFICS,\n];\n","/**\n* @flow\n* @license\n* @Author: Lim Mingjie, Kenneth\n* @Date:   2016-01-20T18:56:22-05:00\n* @Email:  me@kenlimmj.com\n* @Last modified by:   Astrianna\n* @Last modified time: 2016-02-27T19:55:12-05:00\n*/\n\nimport {\n  GATE_SUBSTITUTIONS,\n  GATE_EXCEPTIONS,\n  TREEBANK_CONTRACTIONS,\n} from './constants';\n\n/**\n * Splits a sentence into an array of word tokens\n * in accordance with the Penn Treebank guidelines.\n *\n * NOTE: This method assumes that the input is a single\n * sentence only. Providing multiple sentences within a\n * single string can trigger edge cases which have not\n * been accounted for.\n *\n * Adapted from Titus Wormer's port of the Penn Treebank Tokenizer\n * found at https://gist.github.com/wooorm/8504606\n *\n *\n * @method treeBankTokenize\n * @param  {string}           input     The sentence to be tokenized\n * @return {Array<string>}              An array of word tokens\n */\nexport function treeBankTokenize(input: string): Array<string> {\n  if (input.length === 0) return [];\n\n  // Does the following things in order of appearance by line:\n  // 1. Replace quotes at the sentence start position with double ticks\n  // 2. Wrap spaces around a double quote preceded by opening brackets\n  // 3. Wrap spaces around a non-unicode ellipsis\n  // 4. Wrap spaces around some punctuation signs (,;@#$%&)\n  // 5. Wrap spaces around a period and zero or more closing brackets\n  //    (or quotes), when not preceded by a period and when followed\n  //    by the end of the string. Only splits final periods because\n  //    sentence tokenization is assumed as a preprocessing step\n  // 6. Wrap spaces around all exclamation marks and question marks\n  // 7. Wrap spaces around opening and closing brackets\n  // 8. Wrap spaces around en and em-dashes\n  let parse = input.replace(/^\\\"/, ' `` ')\n                   .replace(/([ (\\[{<])\"/g, '$1 `` ')\n                   .replace(/\\.\\.\\.*/g, ' ... ')\n                   .replace(/[;@#$%&]/g, ' $& ')\n                   .replace(/([^\\.])(\\.)([\\]\\)}>\"\\']*)\\s*$/g, '$1 $2$3 ')\n                   .replace(/[,?!]/g, ' $& ')\n                   .replace(/[\\]\\[\\(\\)\\{\\}<>]/g, ' $& ')\n                   .replace(/---*/g, ' -- ');\n\n  // Wrap spaces at the start and end of the sentence for consistency\n  // i.e. reduce the number of Regex matches required\n  parse = ` ${parse} `;\n\n  // Does the following things in order of appearance by line:\n  // 1. Replace double quotes with a pair of single quotes wrapped with spaces\n  // 2. Wrap possessive or closing single quotes\n  // 3. Add a space before single quotes followed by `s`, `m`, or `d` and a space\n  // 4. Add a space before occurrences of `'ll`, `'re`, `'ve` or `n't`\n  parse = parse.replace(/\"/g, ' \\'\\' ')\n               .replace(/([^'])' /g, '$1 \\' ')\n               .replace(/'([sSmMdD]) /g, ' \\'$1 ')\n               .replace(/('ll|'LL|'re|'RE|'ve|'VE|n't|N'T) /g, ' $1 ');\n\n  let iterator = -1;\n  while (iterator++ < TREEBANK_CONTRACTIONS.length) {\n    // Break uncommon contractions with a space and wrap-in spaces\n    parse = parse.replace(TREEBANK_CONTRACTIONS[iterator], ' $1 $2 ');\n  }\n\n  // Concatenate double spaces and remove start/end spaces\n  parse = parse.replace(/\\ \\ +/g, ' ')\n               .replace(/^\\ |\\ $/g, '');\n\n  // Split on spaces (original and inserted) to return the tokenized result\n  return parse.split(' ');\n}\n\n/**\n * Splits a body of text into an array of sentences\n * using a rule-based segmentation approach.\n *\n * Adapted from Spencer Mountain's nlp_compromise library\n * found at https://github.com/spencermountain/nlp_compromise/\n *\n * @method sentenceSegment\n * @param  {string}         input     The document to be segmented\n * @return {Array<string>}            An array of sentences\n */\nexport function sentenceSegment(input: string): Array<string> {\n  if (input.length === 0) return [];\n\n  const abbrvReg = new RegExp('\\\\b(' + GATE_SUBSTITUTIONS.join('|') + ')[.!?] ?$', 'i');\n  const acronymReg = new RegExp(/[ |.][A-Z].?$/, 'i');\n  const breakReg = new RegExp(/[\\r\\n]+/, 'g');\n  const ellipseReg = new RegExp(/\\.\\.\\.*$/);\n  const excepReg = new RegExp('\\\\b(' + GATE_EXCEPTIONS.join('|') + ')[.!?] ?$', 'i');\n\n  // Split sentences naively based on common terminals (.?!\")\n  let chunks = input.split(/(\\S.+?[.?!])(?=\\s+|$|\")/g);\n  console.log(chunks);\n  let acc = [];\n  for (let idx = 0; idx < chunks.length; idx++) {\n    if (chunks[idx]) {\n      // Trim only whitespace (i.e. preserve line breaks/carriage feeds)\n      chunks[idx] = chunks[idx].replace(/(^ +| +$)/g, '');\n\n      if (breakReg.test(chunks[idx])) {\n        if (chunks[idx + 1] && strIsTitleCase(chunks[idx])) {\n          // Catch line breaks embedded within valid sentences\n          // i.e. sentences that start with a capital letter\n          // and merge them with a delimiting space\n          chunks[idx + 1] = (chunks[idx].trim() || '') + ' ' + (chunks[idx + 1] || '').replace(/ +/g, ' ');\n        } else {\n          // Assume that all other embedded line breaks are\n          // valid sentence breakpoints\n          acc.push(...chunks[idx].trim().split('\\n'));\n        }\n      } else if (chunks[idx + 1] && abbrvReg.test(chunks[idx])) {\n        const nextChunk = chunks[idx + 1];\n        if (nextChunk.trim() && strIsTitleCase(nextChunk) && !excepReg.test(chunks[idx])) {\n          // Catch abbreviations followed by a capital letter and treat as a boundary.\n          // FIXME: This causes named entities like `Mt. Fuji` or `U.S. Government` to fail.\n          acc.push(chunks[idx]);\n          chunks[idx] = '';\n        } else {\n          // Catch common abbreviations and merge them with a delimiting space\n          chunks[idx + 1] = (chunks[idx] || '') + ' ' + (nextChunk || '').replace(/ +/g, ' ');\n        }\n      } else if (chunks[idx].length > 1 && chunks[idx + 1] && acronymReg.test(chunks[idx])) {\n        const words = chunks[idx].split(' ');\n        const lastWord = words[words.length - 1];\n\n        if (lastWord === lastWord.toLowerCase()) {\n          // Catch small-letter abbreviations and merge them.\n          chunks[idx + 1] = chunks[idx + 1] = (chunks[idx] || '') + ' ' + (chunks[idx + 1] || '').replace(/ +/g, ' ');\n        } else if (chunks[idx + 2]) {\n          if (strIsTitleCase(words[words.length - 2]) && strIsTitleCase(chunks[idx + 2])) {\n            // Catch name abbreviations (e.g. Albert I. Jones) by checking if\n            // the previous and next words are all capitalized.\n            chunks[idx + 2] = (chunks[idx] || '') + (chunks[idx + 1] || '').replace(/ +/g, ' ') + (chunks[idx + 2] || '');\n          } else {\n            // Assume that remaining entities are indeed end-of-sentence markers.\n            acc.push(chunks[idx]);\n            chunks[idx] = '';\n          }\n        }\n      } else if (chunks[idx + 1] && ellipseReg.test(chunks[idx])) {\n        // Catch mid-sentence ellipses (and their derivatives) and merge them\n        chunks[idx + 1] = (chunks[idx] || '') + (chunks[idx + 1] || '').replace(/ +/g, ' ');\n      } else if (chunks[idx] && chunks[idx].length > 0) {\n        acc.push(chunks[idx]);\n        chunks[idx] = '';\n      }\n    }\n  }\n\n  // If no matches were found, return the input treated as a single sentence\n  return acc.length === 0 ? [input] : acc;\n}\n\n/**\n * Checks if a string is titlecase\n * @method strIsTitleCase\n * @param  {string}   input       The string to be checked\n * @return {boolean}              True if the string is titlecase and false otherwise\n */\nexport function strIsTitleCase(input: string): boolean {\n  const firstChar = input.trim().slice(0, 1);\n  return charIsUpperCase(firstChar);\n}\n\n/**\n * Checks if a character is uppercase\n * @method charIsUpperCase\n * @param  {string}   input     The character to be tested\n * @return {boolean}            True if the character is uppercase and false otherwise.\n */\nexport function charIsUpperCase(input: string): boolean {\n  if (input.length !== 1) throw new RangeError('Input should be a single character');\n\n  const char = input.charCodeAt(0);\n  return char >= 65 && char <= 90;\n}\n\n/**\n * Memoizes a function using a Map\n *\n * @method memoize\n * @param  {Function} func    The function to be memoized\n * @param  {Function} Store   The data store constructor. Defaults to the ES6-inbuilt Map function.\n *                            A store should implement `has`, `get`, and `set` methods.\n * @return {Function}         A closure of the memoization cache and the original function\n */\nfunction memoize(func: Function, Store: Function = Map): Function {\n  return (() => {\n    let cache = new Store();\n\n    return (n) => {\n      if (cache.has(n)) {\n        return cache.get(n);\n      } else {\n        let result = func(n);\n        cache.set(n, result);\n        return result;\n      }\n    };\n  })();\n}\n\n/**\n * Computes the factorial of a number.\n *\n * This function uses a tail-recursive call to avoid\n * blowing the stack when computing inputs with a large\n * recursion depth.\n *\n * If this function will be called repeatedly within\n * the same scope, it is highly recommended that the\n * user memoize the function (e.g. lodash.memoize).\n *\n * @method factRec\n * @param  {number} x     The number for which the factorial is to be computed\n * @param  {number} acc   The starting value for the computation. Defaults to 1.\n * @return {number}       The factorial result\n */\nfunction factRec(\n  x: number,\n  acc: number = 1\n): number {\n  if (x < 0) throw RangeError('Input must be a positive number');\n  return x < 2 ? acc : factRec(x - 1, x * acc);\n}\n\nexport const fact = memoize(factRec);\n\n/**\n * Returns the skip bigrams for an array of word tokens.\n *\n * @method skipBigram\n * @param  {Array<string>}    tokens      An array of word tokens\n * @return {Array<string>}                An array of skip bigram strings\n */\nexport function skipBigram(\n  tokens: Array<string>\n): Array<string> {\n  if (tokens.length < 2) throw new RangeError('Input must have at least two words');\n\n  let acc = [];\n  for (let baseIdx = 0; baseIdx < tokens.length - 1; baseIdx++) {\n    for (let sweepIdx = baseIdx + 1; sweepIdx < tokens.length; sweepIdx++) {\n      acc.push(`${tokens[baseIdx]} ${tokens[sweepIdx]}`);\n    }\n  }\n\n  return acc;\n}\n\nexport const NGRAM_DEFAULT_OPTS = { start: false, end: false, val: '<S>' };\n\n/**\n * Returns n-grams for an array of word tokens.\n *\n * @method nGram\n * @param  {Array<string>}          tokens    An array of word tokens\n * @param  {number}                 n         The size of the n-gram. Defaults to 2.\n * @param  {Object}                 pad       String padding options. See example.\n * @return {Array<string>}                    An array of n-gram strings\n */\nexport function nGram(\n  tokens: Array<string>,\n  n: number = 2,\n  pad: Object = {}\n): Array<string> {\n  if (n < 1) throw new RangeError('ngram size cannot be smaller than 1');\n\n  if (tokens.length < n) {\n    throw new RangeError('ngram size cannot be larger than the number of tokens available');\n  }\n\n  if (pad !== {}) {\n    const config = Object.assign({}, NGRAM_DEFAULT_OPTS, pad);\n\n    // Clone the input token array to avoid mutating the source data\n    let tempTokens = tokens.slice(0);\n\n    if (config.start) for (let i = 0; i < n - 1; i++) tempTokens.unshift(config.val);\n    if (config.end) for (let i = 0; i < n - 1; i++) tempTokens.push(config.val);\n\n    tokens = tempTokens;\n  }\n\n  let acc = [];\n  for (let idx = 0; idx < (tokens.length - n + 1); idx++) {\n    acc.push(tokens.slice(idx, idx + n).join(' '));\n  }\n\n  return acc;\n}\n\n/**\n * Calculates C(val, 2), i.e. the number of ways 2\n * items can be chosen from `val` items.\n *\n * @method comb2\n * @param  {number} val     The total number of items to choose from\n * @return {number}         The number of ways in which 2 items can be chosen from `val`\n */\nexport function comb2(val: number): number {\n  if (val < 2) throw new RangeError('Input must be greater than 2');\n  return 0.5 * val * (val - 1);\n}\n\n/**\n * Computes the arithmetic mean of an array\n * @method arithmeticMean\n * @param  {Array<number>}   input    Data distribution\n * @return {number}                   The mean of the distribution\n */\nexport function arithmeticMean(input: Array<number>): number {\n  if (input.length < 1) throw new RangeError('Input array must have at least 1 element');\n  return input.reduce((x, y) => x + y) / input.length;\n}\n\n/**\n * Evaluates the jackknife resampling result for a set of\n * candidate summaries vs. a reference summary.\n *\n * @method jackKnife\n * @param  {Array<string>}  cands      An array of candidate summaries to be evaluated\n * @param  {string}         ref        The reference summary to be evealuated against\n * @param  {Function}       func       The function used to evaluate a candidate against a reference.\n *                                     Should be of the type signature (string, string) => number\n * @param  {Function}       test       The function used to compute the test statistic.\n *                                     Defaults to the arithmetic mean.\n *                                     Should be of the type signature (Array<number>) => number\n * @return {number}                    The result computed by applying `test` to the resampled data\n */\nexport function jackKnife(\n  cands: Array<string>,\n  ref: string,\n  func: ((x: string, y: string) => number),\n  test: ((x: Array<number>) => number) = arithmeticMean\n): number {\n  if (cands.length < 2) {\n    throw new RangeError('Candidate array must contain more than one element');\n  }\n\n  const pairs = cands.map(c => func(c, ref));\n\n  let acc = [];\n  for (let idx = 0; idx < pairs.length; idx++) {\n    // Clone the array and remove one element\n    let leaveOneOut = pairs.slice(0);\n    leaveOneOut.splice(idx, 1);\n\n    acc.push(Math.max(...leaveOneOut));\n  }\n\n  return test(acc);\n}\n\n/**\n * Calculates the ROUGE f-measure for a given precision\n * and recall score.\n *\n * DUC evaluation favors precision by setting beta to an\n * arbitary large number. To replicate this, set beta to\n * any value larger than 1.\n *\n * @method fMeasure\n * @param  {number}     p       Precision score\n * @param  {number}     r       Recall score\n * @param  {number}     beta    Weighing value (precision vs. recall).\n *                              Defaults to 0.5, i.e. mean f-score\n * @return {number}             Computed f-score\n */\nexport function fMeasure(\n  p: number,\n  r: number,\n  beta: number = 0.5\n): number {\n  if (p < 0 || p > 1) throw new RangeError('Precision value p must have bounds 0 â¤ p â¤ 1');\n  if (r < 0 || r > 1) throw new RangeError('Recall value r must have bounds 0 â¤ r â¤ 1');\n\n  if (beta < 0) {\n    throw new RangeError('beta value must be greater than 0');\n  } else if (0 <= beta && beta <= 1) {\n    return ((1 + beta * beta) * r * p) / (r + beta * beta * p);\n  } else {\n    return r;\n  }\n}\n\n/**\n * Computes the set intersection of two arrays\n *\n * @method intersection\n * @param  {Array<string>}    a     The first array\n * @param  {Array<string>}    b     The second array\n * @return {Array<string>}          Elements common to both the first and second array\n */\nexport function intersection(a: Array<string>, b: Array<string>): Array<string> {\n  const test = new Set(a);\n  const ref = new Set(b);\n\n  return Array.from(test).filter(elem => ref.has(elem));\n}\n\n/**\n * Computes the longest common subsequence for two arrays.\n * This function returns the elements from the two arrays\n * that form the LCS, in order of their appearance.\n *\n * For speed, the search-space is prunned by eliminating\n * common entities at the start and end of both input arrays.\n *\n * @method lcs\n * @param  {Array<string>}    a     The first array\n * @param  {Array<string>}    b     The second array\n * @return {Array<string>}          The longest common subsequence between the first and second array\n */\nexport function lcs(a: Array<string>, b: Array<string>): Array<string> {\n  if (a.length === 0 || b.length === 0) return [];\n\n  let start = [];\n  let end = [];\n\n  let startIdx = 0;\n  let aEndIdx = a.length - 1;\n  let bEndIdx = b.length - 1;\n\n  while (a[startIdx] && b[startIdx] && (a[startIdx] === b[startIdx])) {\n    start.push(a[startIdx]);\n    startIdx++;\n  }\n\n  while (a[aEndIdx] && b[bEndIdx] && (a[aEndIdx] === b[bEndIdx])) {\n    end.push(a[aEndIdx]);\n    aEndIdx--;\n    bEndIdx--;\n  }\n\n  let trimmedA = a.slice(startIdx, aEndIdx + 1);\n  let trimmedB = b.slice(startIdx, bEndIdx + 1);\n\n  for (let bIdx = 0; bIdx < trimmedB.length; bIdx++) {\n    for (let aIdx = 0; aIdx < trimmedA.length; aIdx++) {\n      if (trimmedB[bIdx] === trimmedA[aIdx]) start.push(trimmedA[aIdx]);\n    }\n  }\n\n  return start.concat(end);\n}\n","/**\n* @flow\n* @license\n* @Author: Lim Mingjie, Kenneth\n* @Date:   2016-01-20T18:56:14-05:00\n* @Email:  me@kenlimmj.com\n* @Last modified by:   Astrianna\n* @Last modified time: 2016-02-27T19:50:25-05:00\n*/\n\nimport * as utils from './utils';\nexport * from './utils';\n\n/**\n * Computes the ROUGE-N score for a candidate summary.\n *\n * Configuration object schema and defaults:\n * ```\n * {\n * \tn: 1                            // The size of the ngram used\n * \tnGram: <inbuilt function>,      // The ngram generator function\n * \ttokenizer: <inbuilt function>   // The string tokenizer\n * }\n * ```\n *\n * `nGram` has a type signature of ((Array<string>, number) => Array<string>)\n * `tokenizer` has a type signature of ((string) => Array<string)\n *\n * @method n\n * @param  {string}     cand        The candidate summary to be evaluated\n * @param  {string}     ref         The reference summary to be evaluated against\n * @param  {Object}     opts        Configuration options (see example)\n * @return {number}                 The ROUGE-N score\n */\nexport function n(\n  cand: string,\n  ref: string,\n  opts: {\n    n: number,\n    nGram: ((tokens: Array<string>, n: number) => Array<string>),\n    tokenizer: ((input: string) => Array<string>)\n  }\n): number {\n  if (cand.length === 0) throw new RangeError('Candidate cannot be an empty string');\n  if (ref.length === 0) throw new RangeError('Reference cannot be an empty string');\n\n  // Merge user-provided configuration with defaults\n  opts = Object.assign({\n    n: 1,\n    nGram: utils.nGram,\n    tokenizer: utils.treeBankTokenize,\n  }, opts);\n\n  const candGrams = opts.nGram(opts.tokenizer(cand), opts.n);\n  const refGrams = opts.nGram(opts.tokenizer(ref), opts.n);\n\n  const match = utils.intersection(candGrams, refGrams);\n  return match.length / refGrams.length;\n}\n\n/**\n * Computes the ROUGE-S score for a candidate summary.\n *\n * Configuration object schema and defaults:\n * ```\n * {\n * \tbeta: 1                             // The beta value used for the f-measure\n * \tgapLength: 2                        // The skip window\n * \tskipBigram: <inbuilt function>,     // The skip-bigram generator function\n * \ttokenizer: <inbuilt function>       // The string tokenizer\n * }\n * ```\n *\n * `skipBigram` has a type signature of ((Array<string>, number) => Array<string>)\n * `tokenizer` has a type signature of ((string) => Array<string)\n *\n * @method s\n * @param  {string}     cand        The candidate summary to be evaluated\n * @param  {string}     ref         The reference summary to be evaluated against\n * @param  {Object}     opts        Configuration options (see example)\n * @return {number}                 The ROUGE-S score\n */\nexport function s(\n  cand: string,\n  ref: string,\n  opts: {\n    beta: number,\n    skipBigram: ((tokens: Array<string>) => Array<string>),\n    tokenizer: ((input: string) => Array<string>)\n  }\n): number {\n  if (cand.length === 0) throw new RangeError('Candidate cannot be an empty string');\n  if (ref.length === 0) throw new RangeError('Reference cannot be an empty string');\n\n  // Merge user-provided configuration with defaults\n  opts = Object.assign({\n    beta: 0.5,\n    skipBigram: utils.skipBigram,\n    tokenizer: utils.treeBankTokenize,\n  }, opts);\n\n  const candGrams = opts.skipBigram(opts.tokenizer(cand));\n  const refGrams = opts.skipBigram(opts.tokenizer(ref));\n\n  const skip2 = utils.intersection(candGrams, refGrams).length;\n\n  if (skip2 === 0) {\n    return 0;\n  } else {\n    const skip2Recall = skip2 / refGrams.length;\n    const skip2Prec = skip2 / candGrams.length;\n\n    return utils.fMeasure(skip2Prec, skip2Recall, opts.beta);\n  }\n}\n\n/**\n * Computes the ROUGE-L score for a candidate summary\n *\n * Configuration object schema and defaults:\n * ```\n * {\n * \tbeta: 1                             // The beta value used for the f-measure\n * \tlcs: <inbuilt function>             // The least common subsequence function\n * \tsegmenter: <inbuilt function>,      // The sentence segmenter\n * \ttokenizer: <inbuilt function>       // The string tokenizer\n * }\n * ```\n *\n * `lcs` has a type signature of ((Array<string>, Array<string>) => Array<string>)\n * `segmenter` has a type signature of ((string) => Array<string)\n * `tokenizer` has a type signature of ((string) => Array<string)\n *\n * @method l\n * @param  {string}     cand        The candidate summary to be evaluated\n * @param  {string}     ref         The reference summary to be evaluated against\n * @param  {Object}     opts        Configuration options (see example)\n * @return {number}                 The ROUGE-L score\n */\nexport function l(\n  cand: string,\n  ref: string,\n  opts: {\n    beta: number,\n    lcs: ((a: Array<string>, b: Array<string>) => Array<string>),\n    segmenter: ((input: string) => Array<string>),\n    tokenizer: ((input: string) => Array<string>)\n  }\n): number {\n  if (cand.length === 0) throw new RangeError('Candidate cannot be an empty string');\n  if (ref.length === 0) throw new RangeError('Reference cannot be an empty string');\n\n  // Merge user-provided configuration with defaults\n  opts = Object.assign({\n    beta: 0.5,\n    lcs: utils.lcs,\n    segmenter: utils.sentenceSegment,\n    tokenizer: utils.treeBankTokenize,\n  }, opts);\n\n  const candSents = opts.segmenter(cand);\n  const refSents = opts.segmenter(ref);\n\n  const candWords = opts.tokenizer(cand);\n  const refWords = opts.tokenizer(ref);\n\n  const lcsAcc = refSents.map(r => {\n    const rTokens = opts.tokenizer(r);\n    const lcsUnion = new Set(...candSents.map(c => opts.lcs(opts.tokenizer(c), rTokens)));\n\n    return lcsUnion.size;\n  });\n\n  // Sum the array as quickly as we can\n  let lcsSum = 0;\n  while (lcsAcc.length) lcsSum += lcsAcc.pop();\n\n  const lcsRecall = lcsSum / candWords.length;\n  const lcsPrec = lcsSum / refWords.length;\n\n  return utils.fMeasure(lcsPrec, lcsRecall, opts.beta);\n}\n"],"names":["utils.nGram","utils.treeBankTokenize","utils.intersection","utils.skipBigram","utils.fMeasure","utils.lcs","utils.sentenceSegment"],"mappings":"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","sourceRoot":"/source/"}