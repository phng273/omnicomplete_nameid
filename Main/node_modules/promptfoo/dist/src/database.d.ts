import type { EvaluateSummary, UnifiedConfig } from './types';
export declare const prompts: import("drizzle-orm/sqlite-core").SQLiteTableWithColumns<{
    name: "prompts";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "id";
            tableName: "prompts";
            dataType: "string";
            columnType: "SQLiteText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, object>;
        createdAt: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "created_at";
            tableName: "prompts";
            dataType: "number";
            columnType: "SQLiteInteger";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, object>;
        prompt: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "prompt";
            tableName: "prompts";
            dataType: "string";
            columnType: "SQLiteText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, object>;
    };
    dialect: "sqlite";
}>;
export declare const promptsRelations: import("drizzle-orm").Relations<"prompts", {
    evalsToPrompts: import("drizzle-orm").Many<"evals_to_prompts">;
}>;
export declare const datasets: import("drizzle-orm/sqlite-core").SQLiteTableWithColumns<{
    name: "datasets";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "id";
            tableName: "datasets";
            dataType: "string";
            columnType: "SQLiteText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, object>;
        tests: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "tests";
            tableName: "datasets";
            dataType: "json";
            columnType: "SQLiteTextJson";
            data: string | (string | import("./types").TestCase<Record<string, string | object | string[]>>)[];
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, object>;
        createdAt: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "created_at";
            tableName: "datasets";
            dataType: "number";
            columnType: "SQLiteInteger";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, object>;
    };
    dialect: "sqlite";
}>;
export declare const datasetsRelations: import("drizzle-orm").Relations<"datasets", {
    evalsToDatasets: import("drizzle-orm").Many<"evals_to_datasets">;
}>;
export declare const evals: import("drizzle-orm/sqlite-core").SQLiteTableWithColumns<{
    name: "evals";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "id";
            tableName: "evals";
            dataType: "string";
            columnType: "SQLiteText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, object>;
        createdAt: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "created_at";
            tableName: "evals";
            dataType: "number";
            columnType: "SQLiteInteger";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, object>;
        description: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "description";
            tableName: "evals";
            dataType: "string";
            columnType: "SQLiteText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, object>;
        results: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "results";
            tableName: "evals";
            dataType: "json";
            columnType: "SQLiteTextJson";
            data: EvaluateSummary;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, object>;
        config: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "config";
            tableName: "evals";
            dataType: "json";
            columnType: "SQLiteTextJson";
            data: Partial<UnifiedConfig>;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, object>;
    };
    dialect: "sqlite";
}>;
export declare const evalsRelations: import("drizzle-orm").Relations<"evals", {
    evalsToPrompts: import("drizzle-orm").Many<"evals_to_prompts">;
    evalsToDatasets: import("drizzle-orm").Many<"evals_to_datasets">;
}>;
export declare const evalsToPrompts: import("drizzle-orm/sqlite-core").SQLiteTableWithColumns<{
    name: "evals_to_prompts";
    schema: undefined;
    columns: {
        evalId: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "eval_id";
            tableName: "evals_to_prompts";
            dataType: "string";
            columnType: "SQLiteText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, object>;
        promptId: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "prompt_id";
            tableName: "evals_to_prompts";
            dataType: "string";
            columnType: "SQLiteText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, object>;
    };
    dialect: "sqlite";
}>;
export declare const evalsToPromptsRelations: import("drizzle-orm").Relations<"evals_to_prompts", {
    eval: import("drizzle-orm").One<"evals", true>;
    prompt: import("drizzle-orm").One<"prompts", true>;
}>;
export declare const evalsToDatasets: import("drizzle-orm/sqlite-core").SQLiteTableWithColumns<{
    name: "evals_to_datasets";
    schema: undefined;
    columns: {
        evalId: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "eval_id";
            tableName: "evals_to_datasets";
            dataType: "string";
            columnType: "SQLiteText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, object>;
        datasetId: import("drizzle-orm/sqlite-core").SQLiteColumn<{
            name: "dataset_id";
            tableName: "evals_to_datasets";
            dataType: "string";
            columnType: "SQLiteText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, object>;
    };
    dialect: "sqlite";
}>;
export declare const evalsToDatasetsRelations: import("drizzle-orm").Relations<"evals_to_datasets", {
    eval: import("drizzle-orm").One<"evals", true>;
    dataset: import("drizzle-orm").One<"datasets", true>;
}>;
export declare function getDbPath(): string;
export declare function getDbSignalPath(): string;
export declare function getDb(): import("drizzle-orm/better-sqlite3").BetterSQLite3Database<Record<string, unknown>>;
//# sourceMappingURL=database.d.ts.map