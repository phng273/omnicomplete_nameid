"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssertionsResult = void 0;
const DEFAULT_TOKENS_USED = {
    total: 0,
    prompt: 0,
    completion: 0,
};
class AssertionsResult {
    static noAssertsResult() {
        return {
            pass: true,
            score: 1,
            reason: 'No assertions',
            tokensUsed: { ...DEFAULT_TOKENS_USED },
            assertion: null,
        };
    }
    constructor({ threshold, parentAssertionSet, } = {}) {
        this.tokensUsed = {
            ...DEFAULT_TOKENS_USED,
        };
        this.totalScore = 0;
        this.totalWeight = 0;
        this.componentResults = [];
        this.namedScores = {};
        this.result = null;
        this.threshold = threshold;
        this._parentAssertionSet = parentAssertionSet;
    }
    get parentAssertionSet() {
        return this._parentAssertionSet;
    }
    addResult({ index, result, metric, weight = 1, }) {
        this.totalScore += result.score * weight;
        this.totalWeight += weight;
        this.componentResults[index] = result;
        if (metric) {
            this.namedScores[metric] = (this.namedScores[metric] || 0) + result.score;
        }
        if (result.tokensUsed) {
            this.tokensUsed.total += result.tokensUsed.total;
            this.tokensUsed.prompt += result.tokensUsed.prompt;
            this.tokensUsed.completion += result.tokensUsed.completion;
        }
        if (result.pass) {
            return;
        }
        this.failedReason = result.reason;
        if (process.env.PROMPTFOO_SHORT_CIRCUIT_TEST_FAILURES) {
            throw new Error(result.reason);
        }
    }
    testResult() {
        if (this.result) {
            return this.result;
        }
        const score = this.totalScore / this.totalWeight;
        let pass = !this.failedReason;
        let reason = !this.failedReason ? 'All assertions passed' : this.failedReason;
        if (this.threshold) {
            // Existence of a test threshold overrides the pass/fail status of individual assertions
            pass = score >= this.threshold;
            if (pass) {
                reason = `Aggregate score ${score.toFixed(2)} â‰¥ ${this.threshold} threshold`;
            }
            else {
                reason = `Aggregate score ${score.toFixed(2)} < ${this.threshold} threshold`;
            }
        }
        this.result = {
            pass,
            score,
            reason,
            namedScores: this.namedScores,
            tokensUsed: this.tokensUsed,
            componentResults: this.componentResults,
            assertion: null,
        };
        return this.result;
    }
}
exports.AssertionsResult = AssertionsResult;
//# sourceMappingURL=AssertionsResult.js.map