"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importModule = exports.getDirectory = void 0;
const path = __importStar(require("path"));
const node_url_1 = require("node:url");
// esm-specific crap that needs to get mocked out in tests
//import path from 'path';
//import { fileURLToPath } from 'url';
function getDirectory() {
    /*
    // @ts-ignore: Jest chokes on this
    const __filename = fileURLToPath(import.meta.url);
    return path.dirname(__filename);
   */
    return __dirname;
}
exports.getDirectory = getDirectory;
async function importModule(modulePath, functionName) {
    // This is some hacky shit. It prevents typescript from transpiling `import` to `require`, which breaks mjs imports.
    const resolvedPath = (0, node_url_1.pathToFileURL)(path.resolve(modulePath));
    const importedModule = await eval(`import('${resolvedPath}')`);
    const mod = importedModule?.default?.default || importedModule?.default || importedModule;
    if (functionName) {
        return mod[functionName];
    }
    return mod;
}
exports.importModule = importModule;
//# sourceMappingURL=esm.js.map