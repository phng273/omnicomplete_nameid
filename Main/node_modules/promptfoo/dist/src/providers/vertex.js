"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VertexChatProvider = void 0;
const logger_1 = __importDefault(require("../logger"));
const shared_1 = require("./shared");
const cache_1 = require("../cache");
const vertexUtil_1 = require("./vertexUtil");
let cachedAuth;
async function getGoogleClient() {
    if (!cachedAuth) {
        let GoogleAuth;
        try {
            const importedModule = await Promise.resolve().then(() => __importStar(require('google-auth-library')));
            GoogleAuth = importedModule.GoogleAuth;
        }
        catch (err) {
            throw new Error('The google-auth-library package is required as a peer dependency. Please install it in your project or globally.');
        }
        cachedAuth = new GoogleAuth({
            scopes: 'https://www.googleapis.com/auth/cloud-platform',
        });
    }
    const client = await cachedAuth.getClient();
    const projectId = await cachedAuth.getProjectId();
    return { client, projectId };
}
class VertexGenericProvider {
    constructor(modelName, options = {}) {
        const { config, id, env } = options;
        this.env = env;
        this.modelName = modelName;
        this.config = config || {};
        this.id = id ? () => id : this.id;
    }
    id() {
        return `vertex:${this.modelName}`;
    }
    toString() {
        return `[Google Vertex Provider ${this.modelName}]`;
    }
    getApiHost() {
        return (this.config.apiHost ||
            this.env?.VERTEX_API_HOST ||
            process.env.VERTEX_API_HOST ||
            `${this.getRegion()}-aiplatform.googleapis.com`);
    }
    async getProjectId() {
        return ((await getGoogleClient()).projectId ||
            this.config.projectId ||
            this.env?.VERTEX_PROJECT_ID ||
            process.env.VERTEX_PROJECT_ID);
    }
    getApiKey() {
        return this.config.apiKey || this.env?.VERTEX_API_KEY || process.env.VERTEX_API_KEY;
    }
    getRegion() {
        return (this.config.region || this.env?.VERTEX_REGION || process.env.VERTEX_REGION || 'us-central1');
    }
    getPublisher() {
        return (this.config.publisher ||
            this.env?.VERTEX_PUBLISHER ||
            process.env.VERTEX_PUBLISHER ||
            'google');
    }
    // @ts-ignore: Prompt is not used in this implementation
    async callApi(prompt) {
        throw new Error('Not implemented');
    }
}
class VertexChatProvider extends VertexGenericProvider {
    constructor(modelName, options = {}) {
        if (!VertexChatProvider.CHAT_MODELS.includes(modelName)) {
            logger_1.default.warn(`Using unknown Google Vertex chat model: ${modelName}`);
        }
        super(modelName, options);
    }
    async callApi(prompt) {
        if (!this.getApiKey()) {
            throw new Error('Google Vertex API key is not set. Set the VERTEX_API_KEY environment variable or add `apiKey` to the provider config. You can get an API token by running `gcloud auth print-access-token`');
        }
        if (!this.getProjectId()) {
            throw new Error('Google Vertex project ID is not set. Set the VERTEX_PROJECT_ID environment variable or add `projectId` to the provider config.');
        }
        if (this.modelName.includes('gemini')) {
            return this.callGeminiApi(prompt);
        }
        return this.callPalm2Api(prompt);
    }
    async callGeminiApi(prompt) {
        // https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/gemini#gemini-pro
        let contents = (0, shared_1.parseChatPrompt)(prompt, {
            role: 'user',
            parts: {
                text: prompt,
            },
        });
        const { contents: updatedContents, coerced } = (0, vertexUtil_1.maybeCoerceToGeminiFormat)(contents);
        if (coerced) {
            logger_1.default.debug(`Coerced JSON prompt to Gemini format: ${JSON.stringify(contents)}`);
            contents = updatedContents;
        }
        // https://ai.google.dev/api/rest/v1/models/streamGenerateContent
        const body = {
            contents,
            generationConfig: {
                context: this.config.context,
                examples: this.config.examples,
                stopSequence: this.config.stopSequence,
                temperature: this.config.temperature,
                maxOutputTokens: this.config.maxOutputTokens,
                topP: this.config.topP,
                topK: this.config.topK,
                ...this.config.generationConfig,
            },
            safetySettings: this.config.safetySettings,
        };
        logger_1.default.debug(`Preparing to call Google Vertex API (Gemini) with body: ${JSON.stringify(body)}`);
        const cache = await (0, cache_1.getCache)();
        const cacheKey = `vertex:gemini:${JSON.stringify(body)}`;
        let cachedResponse;
        if ((0, cache_1.isCacheEnabled)()) {
            cachedResponse = await cache.get(cacheKey);
            if (cachedResponse) {
                logger_1.default.debug(`Returning cached response for prompt: ${prompt}`);
                const parsedCachedResponse = JSON.parse(cachedResponse);
                const tokenUsage = parsedCachedResponse.tokenUsage;
                if (tokenUsage) {
                    tokenUsage.cached = tokenUsage.total;
                }
                return { ...parsedCachedResponse, cached: true };
            }
        }
        let data;
        try {
            const { client, projectId } = await getGoogleClient();
            const url = `https://${this.getApiHost()}/v1/projects/${projectId}/locations/${this.getRegion()}/publishers/${this.getPublisher()}/models/${this.modelName}:streamGenerateContent`;
            const res = await client.request({
                url,
                method: 'POST',
                data: body,
            });
            data = res.data;
        }
        catch (err) {
            return {
                error: `API call error: ${JSON.stringify(err)}`,
            };
        }
        logger_1.default.debug(`Gemini API response: ${JSON.stringify(data)}`);
        try {
            const dataWithError = data;
            const error = dataWithError[0].error;
            if (error) {
                return {
                    error: `Error ${error.code}: ${error.message}`,
                };
            }
            const dataWithResponse = data;
            const output = dataWithResponse
                .map((datum) => {
                const part = datum.candidates[0].content.parts[0];
                if ('text' in part) {
                    return part.text;
                }
                return JSON.stringify(part);
            })
                .join('');
            const lastData = dataWithResponse[dataWithResponse.length - 1];
            const tokenUsage = {
                total: lastData.usageMetadata?.totalTokenCount || 0,
                prompt: lastData.usageMetadata?.promptTokenCount || 0,
                completion: lastData.usageMetadata?.candidatesTokenCount || 0,
            };
            const response = {
                cached: false,
                output,
                tokenUsage,
            };
            if ((0, cache_1.isCacheEnabled)()) {
                await cache.set(cacheKey, JSON.stringify(response));
            }
            return response;
        }
        catch (err) {
            return {
                error: `Gemini API response error: ${String(err)}: ${JSON.stringify(data)}`,
            };
        }
    }
    async callPalm2Api(prompt) {
        const instances = (0, shared_1.parseChatPrompt)(prompt, [
            {
                messages: [
                    {
                        author: 'user',
                        content: prompt,
                    },
                ],
            },
        ]);
        const body = {
            instances,
            parameters: {
                context: this.config.context,
                examples: this.config.examples,
                safetySettings: this.config.safetySettings,
                stopSequence: this.config.stopSequence,
                temperature: this.config.temperature,
                maxOutputTokens: this.config.maxOutputTokens,
                topP: this.config.topP,
                topK: this.config.topK,
            },
        };
        logger_1.default.debug(`Calling Vertex Palm2 API: ${JSON.stringify(body)}`);
        const cache = await (0, cache_1.getCache)();
        const cacheKey = `vertex:palm2:${JSON.stringify(body)}`;
        let cachedResponse;
        if ((0, cache_1.isCacheEnabled)()) {
            cachedResponse = await cache.get(cacheKey);
            if (cachedResponse) {
                logger_1.default.debug(`Returning cached response for prompt: ${prompt}`);
                const parsedCachedResponse = JSON.parse(cachedResponse);
                const tokenUsage = parsedCachedResponse.tokenUsage;
                if (tokenUsage) {
                    tokenUsage.cached = tokenUsage.total;
                }
                return { ...parsedCachedResponse, cached: true };
            }
        }
        let data;
        try {
            const { client, projectId } = await getGoogleClient();
            const url = `https://${this.getApiHost()}/v1/projects/${projectId}/locations/${this.getRegion()}/publishers/${this.getPublisher()}/models/${this.modelName}:predict`;
            const res = await client.request({
                url,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${this.getApiKey()}`,
                },
                data: body,
            });
            data = res.data;
        }
        catch (err) {
            return {
                error: `API call error: ${JSON.stringify(err)}`,
            };
        }
        logger_1.default.debug(`Vertex Palm2 API response: ${JSON.stringify(data)}`);
        try {
            if (data.error) {
                return {
                    error: `Error ${data.error.code}: ${data.error.message}`,
                };
            }
            const output = data.predictions?.[0].candidates[0].content;
            const response = {
                output,
                cached: false,
            };
            if ((0, cache_1.isCacheEnabled)()) {
                await cache.set(cacheKey, JSON.stringify(response));
            }
            return response;
        }
        catch (err) {
            return {
                error: `API response error: ${String(err)}: ${JSON.stringify(data)}`,
            };
        }
    }
}
exports.VertexChatProvider = VertexChatProvider;
// TODO(ian): Completion models
// https://cloud.google.com/vertex-ai/generative-ai/docs/learn/model-versioning#gemini-model-versions
VertexChatProvider.CHAT_MODELS = [
    'chat-bison',
    'chat-bison@001',
    'chat-bison@002',
    'chat-bison-32k',
    'chat-bison-32k@001',
    'chat-bison-32k@002',
    'codechat-bison',
    'codechat-bison@001',
    'codechat-bison@002',
    'codechat-bison-32k',
    'codechat-bison-32k@001',
    'codechat-bison-32k@002',
    'gemini-pro',
    'gemini-ultra',
    'gemini-1.0-pro-vision',
    'gemini-1.0-pro-vision-001',
    'gemini-1.0-pro',
    'gemini-1.0-pro-001',
    'gemini-1.0-pro-002',
    'gemini-pro-vision',
    'gemini-1.5-pro-latest',
    'gemini-1.5-pro-preview-0409',
    'aqa',
];
//# sourceMappingURL=vertex.js.map